package main

import (
	"encoding/base64"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"

	"github.com/gen2brain/beeep"
	"github.com/getlantern/systray"
)

var mgdltommol = 18.018018018
var lastValue float64
var directions = map[string]string{
	"\"TripleUp\"":      "⤊",
	"\"DoubleUp\"":      "⇈",
	"\"SingleUp\"":      "↑",
	"\"FortyFiveUp\"":   "↗",
	"\"Flat\"":          "→",
	"\"FortyFiveDown\"": "↘",
	"\"SingleDown\"":    "↓",
	"\"DoubleDown\"":    "⇊",
	"\"TripleDown\"":    "⤋",
}
var rising = map[string]string{
	"\"TripleUp\"": "",
	"\"DoubleUp\"": "",
	"\"SingleUp\"": "",
}
var falling = map[string]string{
	"\"TripleDown\"": "",
	"\"DoubleDown\"": "",
	"\"SingleDown\"": "",
}
var icons = map[string]string{
	"red":    "",
	"green":  "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",
	"orange": "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",
}
var decodedIcons = map[string][]byte{}
var flags = map[string]interface{}{}
var lastAlert string

func main() {
	flags["url"] = flag.String("url", "", "Your nightscout url e.g. https://example.herokuapp.com")
	flags["low"] = flag.Float64("low", 4.0, "Your BG low target")
	flags["high"] = flag.Float64("high", 8.0, "Your BG high target")
	flags["urgent-high"] = flag.Float64("urgent-high", 15.0, "Your BG urgent high target")
	flag.Parse()

	systray.Run(func() {
		open := systray.AddMenuItem("Open in browser", "")
		refresh := systray.AddMenuItem("Refresh", "")
		quit := systray.AddMenuItem("Quit", "")
		go func() {
			for {
				select {
				case <-open.ClickedCh:
					exec.Command("xdg-open", *flags["url"].(*string)).Start()
				case <-refresh.ClickedCh:
					setBg()
				case <-quit.ClickedCh:
					systray.Quit()
				}
			}
		}()
		setBg()
		for range time.Tick(time.Minute * 1) {
			setBg()
		}
	}, func() {})
}

func alert(title, text string) {
	var icon string
	file, err := ioutil.TempFile("./", "red.png")
	if err == nil {
		defer file.Close()
		defer os.Remove(icon)
		img, err := getIconSlice("red")
		if err == nil {
			file.Write(img)
			icon = file.Name()
		}
	}

	beeep.Alert(title, text, icon)
}

func getBg() string {
	url := *(flags["url"]).(*string) + "/api/v1/entries?count=1"
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
	}
	stringBody := strings.Split(string(body), "\t")
	mgdl, err := strconv.Atoi(stringBody[2])
	if err != nil {
		fmt.Println(err)
	}
	direction, ok := directions[stringBody[3]]
	lastValue = float64(mgdl) / mgdltommol
	if !ok {
		direction = "-"
		if lastAlert != "failed" {
			alert("Failed to get BG direction", fmt.Sprintf("%.1f", lastValue))
			lastAlert = "failed"
		}
	} else if float64(mgdl)/mgdltommol != lastValue {
		if _, ok := rising[stringBody[3]]; ok {
			if lastAlert != "rising" {
				alert("Rising fast", fmt.Sprintf("%.1f %s", lastValue, direction))
				lastAlert = "rising"
			}
		} else if _, ok := falling[stringBody[3]]; ok {
			if lastAlert != "falling" {
				alert("Falling fast", fmt.Sprintf("%.1f %s", lastValue, direction))
				lastAlert = "falling"
			}
		}
	}

	return fmt.Sprintf("%.1f %s", lastValue, direction)
}

func getIcon() []byte {
	var icon string
	if lastValue < *(flags["low"]).(*float64) || lastValue > *(flags["urgent-high"]).(*float64) {
		icon = "red"
	} else if lastValue > *(flags["high"]).(*float64) {
		icon = "orange"
	} else {
		icon = "green"
	}

	img, _ := getIconSlice(icon)

	return img
}

func getIconSlice(icon string) ([]byte, error) {
	if _, ok := decodedIcons[icon]; !ok {
		img, err := base64.StdEncoding.DecodeString(icons[icon])
		if err != nil {
			return []byte(" "), errors.New("Failed to get icon")
		}
		decodedIcons[icon] = img
	}

	return decodedIcons[icon], nil
}

func setBg() {
	systray.SetTitle(getBg())
	icon := getIcon()
	systray.SetIcon(icon)
}
