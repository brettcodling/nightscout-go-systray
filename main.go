package main

import (
	"encoding/base64"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"log/syslog"
	"net/http"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"

	"github.com/gen2brain/beeep"
	"github.com/getlantern/systray"
)

const mgdltommol = 18.018018018
const predictLowSeconds = 3600

type bg struct {
	Direction          direction
	LastBgAlert        string
	LastDirectionAlert string
	PreviousValue      bgValue
	Value              bgValue
}

type bgValue struct {
	Timestamp int64
	Value     float64
}

type direction struct {
	Value      string
	IsRising   bool
	IsFalling  bool
	IsFallback bool
}

type flags struct {
	Url        *string
	Urgenthigh *float64
	High       *float64
	Low        *float64
}

type icon struct {
	Base64  string
	Decoded []byte
}

var (
	args = flags{
		Url:        flag.String("url", "", "Your nightscout url e.g. https://example.herokuapp.com"),
		Urgenthigh: flag.Float64("urgent-high", 15.0, "Your BG urgent high target"),
		High:       flag.Float64("high", 8.0, "Your BG high target"),
		Low:        flag.Float64("low", 4.0, "Your BG low target"),
	}
	directions = map[string]direction{
		"TripleUp": {
			Value:      "⤊",
			IsRising:   true,
			IsFalling:  false,
			IsFallback: false,
		},
		"DoubleUp": {
			Value:      "⇈",
			IsRising:   true,
			IsFalling:  false,
			IsFallback: false,
		},
		"SingleUp": {
			Value:      "↑",
			IsRising:   true,
			IsFalling:  false,
			IsFallback: false,
		},
		"FortyFiveUp": {
			Value:      "↗",
			IsRising:   false,
			IsFalling:  false,
			IsFallback: false,
		},
		"Flat": {
			Value:      "→",
			IsRising:   false,
			IsFalling:  false,
			IsFallback: false,
		},
		"FortyFiveDown": {
			Value:      "↘",
			IsRising:   false,
			IsFalling:  false,
			IsFallback: false,
		},
		"SingleDown": {
			Value:      "↓",
			IsRising:   false,
			IsFalling:  true,
			IsFallback: false,
		},
		"DoubleDown": {
			Value:      "⇊",
			IsRising:   false,
			IsFalling:  true,
			IsFallback: false,
		},
		"TripleDown": {
			Value:      "⤋",
			IsRising:   false,
			IsFalling:  true,
			IsFallback: false,
		},
		"None": {
			Value:      "-",
			IsRising:   false,
			IsFalling:  false,
			IsFallback: true,
		},
	}
	fallbackDirection = "None"
	icons             = map[string]icon{
		"red": {
			Base64: "",
		},
		"green": {
			Base64: "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",
		},
		"orange": {
			Base64: "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",
		},
	}
	lastBg bg
)

func main() {
	syslog, err := syslog.New(syslog.LOG_INFO, "CGM")
	if err != nil {
		panic("Unable to connect to syslog")
	}
	log.SetOutput(syslog)

	flag.Parse()

	if *args.Url == "" {
		log.Fatal("A nightscout URL is required")
	}

	systray.Run(func() {
		open := systray.AddMenuItem("Open in browser", "")
		refresh := systray.AddMenuItem("Refresh", "")
		quit := systray.AddMenuItem("Quit", "")
		go func() {
			for {
				select {
				case <-open.ClickedCh:
					exec.Command("xdg-open", *args.Url).Start()
				case <-refresh.ClickedCh:
					setBg()
				case <-quit.ClickedCh:
					systray.Quit()
				}
			}
		}()
		setBg()
		for range time.Tick(time.Minute * 1) {
			setBg()
		}
	}, func() {})
}

func (b *bg) alert() {
	alerts := b.getAlerts()
	if len(alerts) < 1 {
		return
	}
	var filename string
	file, err := ioutil.TempFile("./", "red.png")
	if err == nil {
		defer file.Close()
		img, err := decodedIcon("red")
		if err != nil {
			log.Println(err)
		} else {
			file.Write(img)
			filename = file.Name()
		}
	}

	for _, alert := range alerts {
		beeep.Alert("CGM", alert, filename)
	}
	if filename != "" {
		os.Remove(filename)
	}
}

func (b *bg) getAlerts() (alerts []string) {
	if b.Direction.IsFallback {
		if b.LastDirectionAlert != "falied" {
			alerts = append(alerts, fmt.Sprintf("%s. %.1f", "Failed to get BG direction", b.Value.Value))
			b.LastDirectionAlert = "failed"
		}
	} else if b.Value.Value != b.PreviousValue.Value {
		if b.Direction.IsRising {
			if b.LastDirectionAlert != "rising" {
				alerts = append(alerts, fmt.Sprintf("%s %.1f %s", "Rising fast!", b.Value.Value, b.Direction.Value))
				b.LastDirectionAlert = "rising"
			}
		} else if b.Direction.IsFalling {
			if b.LastDirectionAlert != "falling" {
				alerts = append(alerts, fmt.Sprintf("%s %.1f %s", "Falling fast!", b.Value.Value, b.Direction.Value))
				b.LastDirectionAlert = "falling"
			}
		}
	}

	if b.Value.isLow() {
		if b.LastBgAlert != "low" {
			alerts = append(alerts, fmt.Sprintf("%s %.1f %s", "Low!", b.Value.Value, b.Direction.Value))
			b.LastBgAlert = "low"
		}
	} else if b.Value.isUrgentHigh() {
		if b.LastBgAlert != "high" {
			alerts = append(alerts, fmt.Sprintf("%s %.1f %s", "Urgent Hight!", b.Value.Value, b.Direction.Value))
			b.LastBgAlert = "high"
		}
	}

	if b.Value.Timestamp != b.PreviousValue.Timestamp {
		if b.Value.Value < b.PreviousValue.Value {
			seconds := (b.Value.Timestamp - b.PreviousValue.Timestamp) / 1000
			changePerSecond := (b.PreviousValue.Value - b.Value.Value) / float64(seconds)
			if b.Value.Value-changePerSecond*predictLowSeconds < *args.Low {
				var minutesToLow int
				secondsToLow := int((b.Value.Value - *args.Low) / changePerSecond)
				if secondsToLow >= 60 {
					minutesToLow = int(secondsToLow / 60)
					secondsToLow = secondsToLow - minutesToLow*60
				}
				alerts = append(alerts, fmt.Sprintf("%s %dm%ds", "Predicted Low!", minutesToLow, secondsToLow))
			}
		}
	}

	return
}

func (b *bg) getBg() string {
	url := *args.Url + "/api/v1/entries?count=1"
	resp, err := http.Get(url)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}
	stringBody := strings.Split(string(body), "\t")
	timestamp, err := strconv.ParseInt(stringBody[1], 10, 64)
	if err != nil {
		log.Println(err)
	}
	mgdl, err := strconv.Atoi(stringBody[2])
	if err != nil {
		log.Println(err)
	}
	direction := strings.ReplaceAll(stringBody[3], "\"", "")
	_, ok := directions[direction]
	if !ok {
		direction = fallbackDirection
	}

	b.Direction = directions[direction]
	b.PreviousValue = b.Value
	b.Value = bgValue{
		Timestamp: timestamp,
		Value:     float64(mgdl) / mgdltommol,
	}
	b.alert()

	return fmt.Sprintf("%.1f %s", b.Value.Value, b.Direction.Value)
}

func (b bg) getIcon() []byte {
	var i string
	if b.Value.isLow() || b.Value.isUrgentHigh() {
		i = "red"
	} else if b.Value.isHigh() {
		i = "orange"
	} else {
		i = "green"
	}

	img, err := decodedIcon(i)
	if err != nil {
		log.Println(err)
	}

	return img
}

func (b bgValue) isUrgentHigh() bool {
	return b.Value > *args.Urgenthigh
}

func (b bgValue) isHigh() bool {
	return b.Value > *args.High
}

func (b bgValue) isLow() bool {
	return b.Value < *args.Low
}

func decodedIcon(i string) ([]byte, error) {
	if len(icons[i].Decoded) < 1 {
		img, err := base64.StdEncoding.DecodeString(icons[i].Base64)
		if err != nil {
			return []byte(" "), fmt.Errorf("Failed to get icon: %s", i)
		}
		icons[i] = icon{
			Base64:  icons[i].Base64,
			Decoded: img,
		}
	}

	return icons[i].Decoded, nil
}

func setBg() {
	systray.SetTitle(lastBg.getBg())
	icon := lastBg.getIcon()
	systray.SetIcon(icon)
}
